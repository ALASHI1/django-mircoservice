services:
  db:
    image: postgres:15
    container_name: my_postgres
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build: .
    container_name: django_app
    entrypoint: /app/entrypoint.sh
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - RUN_MIGRATIONS=True
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  celery:
    build: .
    container_name: celery_worker
    command: celery -A core worker --loglevel=info
    environment:
      - RUN_MIGRATIONS=False
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend

    user: celeryuser
  
  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"  # Expose port 80 to access the app
    volumes:
      - .:/app  # Link the app's files for Nginx to access static
    depends_on:
      - django
    networks:
      - backend

volumes:
  postgres_data:

networks:
  backend:
